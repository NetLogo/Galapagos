`var AgentModel = tortoise_require('agentmodel');\nvar ColorModel = tortoise_require('engine/core/colormodel');\nvar Exception = tortoise_require('util/exception');\nvar Link = tortoise_require('engine/core/link');\nvar LinkSet = tortoise_require('engine/core/linkset');\nvar Meta = tortoise_require('meta');\nvar NLMath = tortoise_require('util/nlmath');\nvar NLType = tortoise_require('engine/core/typechecker');\nvar PatchSet = tortoise_require('engine/core/patchset');\nvar PenBundle = tortoise_require('engine/plot/pen');\nvar Plot = tortoise_require('engine/plot/plot');\nvar PlotOps = tortoise_require('engine/plot/plotops');\nvar Random = tortoise_require('shim/random');\nvar StrictMath = tortoise_require('shim/strictmath');\nvar Tasks = tortoise_require('engine/prim/tasks');\nvar Turtle = tortoise_require('engine/core/turtle');\nvar TurtleSet = tortoise_require('engine/core/turtleset');\nvar notImplemented = tortoise_require('util/notimplemented');\nvar { DeathInterrupt, StopInterrupt } = tortoise_require('util/interrupts');\n\nvar linkShapes = {"default":{"name":"default","direction-indicator":{"name":"link direction","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":150,"x2":90,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":150,"x2":210,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"curviness":0,"lines":[{"x-offset":-0.2,"is-visible":false,"dash-pattern":[0,1]},{"x-offset":0,"is-visible":true,"dash-pattern":[1,0]},{"x-offset":0.2,"is-visible":false,"dash-pattern":[0,1]}]}};\nvar turtleShapes = {"default":{"name":"default","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,40,150,260],"ycors":[5,250,205,250],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"airplane":{"name":"airplane","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,135,120,120,15,15,120,135,105,120,150,180,210,165,180,285,285,180,180,165],"ycors":[0,15,60,105,165,195,180,240,270,285,270,285,270,240,180,195,165,105,60,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"airplane sick":{"name":"airplane sick","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,135,120,120,15,15,120,135,105,120,150,180,210,165,180,285,285,180,180,165],"ycors":[0,15,60,105,165,195,180,240,270,285,270,285,270,240,180,195,165,105,60,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":150,"y":165,"diam":90,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"android":{"name":"android","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[210,240,210,165],"ycors":[90,195,210,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":3,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,120,105,105,135,150,165,195,195,180,195],"ycors":[88,193,240,298,300,210,300,298,240,193,88],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":127,"ymin":81,"xmax":172,"ymax":96,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":135,"ymin":33,"xmax":165,"ymax":60,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[90,60,90,135],"ycors":[90,195,210,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"android sick":{"name":"android sick","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[210,240,210,165],"ycors":[90,195,210,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":3,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,120,105,105,135,150,165,195,195,180,195],"ycors":[88,193,240,298,300,210,300,298,240,193,88],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":127,"ymin":81,"xmax":172,"ymax":96,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":135,"ymin":33,"xmax":165,"ymax":60,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[90,60,90,135],"ycors":[90,195,210,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":150,"y":120,"diam":120,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"box":{"name":"box","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,285,285,150],"ycors":[285,225,75,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,15,150,285],"ycors":[135,75,15,75],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[15,15,150,150],"ycors":[75,225,285,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":285,"x2":150,"y2":135,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":15,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":285,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"box sick":{"name":"box sick","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,270,270,150],"ycors":[285,225,90,150],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,30,150,270],"ycors":[150,90,30,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[30,30,150,150],"ycors":[90,225,285,150],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":285,"x2":150,"y2":150,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":150,"x2":30,"y2":90,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":150,"x2":270,"y2":90,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x":170,"y":178,"diam":108,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"butterfly":{"name":"butterfly","editableColorIndex":0,"rotate":false,"elements":[{"xmin":92,"ymin":135,"xmax":207,"ymax":224,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":158,"y":53,"diam":134,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":165,"y":180,"diam":90,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":45,"y":180,"diam":90,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":8,"y":53,"diam":134,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":43,"y1":189,"x2":253,"y2":189,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"xmin":135,"ymin":60,"xmax":165,"ymax":285,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":165,"y":15,"diam":30,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":105,"y":15,"diam":30,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":120,"y1":30,"x2":135,"y2":60,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":165,"y1":60,"x2":180,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":135,"y1":60,"x2":135,"y2":285,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":165,"y1":285,"x2":165,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"butterfly sick":{"name":"butterfly sick","editableColorIndex":0,"rotate":false,"elements":[{"xmin":92,"ymin":135,"xmax":207,"ymax":224,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":158,"y":53,"diam":134,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":165,"y":180,"diam":90,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":45,"y":180,"diam":90,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":8,"y":53,"diam":134,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":43,"y1":189,"x2":253,"y2":189,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"xmin":135,"ymin":60,"xmax":165,"ymax":285,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":165,"y":15,"diam":30,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":105,"y":15,"diam":30,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":120,"y1":30,"x2":135,"y2":60,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":165,"y1":60,"x2":180,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":135,"y1":60,"x2":135,"y2":285,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":165,"y1":285,"x2":165,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x":156,"y":171,"diam":108,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"cactus":{"name":"cactus","editableColorIndex":0,"rotate":false,"elements":[{"xmin":135,"ymin":30,"xmax":175,"ymax":177,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":67,"ymin":105,"xmax":100,"ymax":214,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":217,"ymin":89,"xmax":251,"ymax":167,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":157,"ymin":151,"xmax":220,"ymax":185,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":94,"ymin":189,"xmax":148,"ymax":233,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":135,"ymin":162,"xmax":184,"ymax":297,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":219,"y":76,"diam":28,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":138,"y":7,"diam":34,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":67,"y":93,"diam":30,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":201,"y":145,"diam":40,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":69,"y":193,"diam":40,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"cactus sick":{"name":"cactus sick","editableColorIndex":0,"rotate":false,"elements":[{"xmin":135,"ymin":30,"xmax":175,"ymax":177,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":67,"ymin":105,"xmax":100,"ymax":214,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":217,"ymin":89,"xmax":251,"ymax":167,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":157,"ymin":151,"xmax":220,"ymax":185,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":94,"ymin":189,"xmax":148,"ymax":233,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":135,"ymin":162,"xmax":184,"ymax":297,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":219,"y":76,"diam":28,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":138,"y":7,"diam":34,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":67,"y":93,"diam":30,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":201,"y":145,"diam":40,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":69,"y":193,"diam":40,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":156,"y":171,"diam":108,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"car":{"name":"car","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[300,279,261,240,226,213,203,185,159,135,75,0,0,0,300,300],"ycors":[180,164,144,135,132,106,84,63,50,50,60,150,165,225,225,180],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":180,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":30,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[162,132,134,209,194,189,180],"ycors":[80,78,135,135,105,96,89],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":47,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":195,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"car sick":{"name":"car sick","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[285,285,279,261,240,226,213,199,171,149,129,75,15,15,15,285,283,283],"ycors":[208,178,164,144,135,132,106,84,68,68,68,75,150,165,225,225,174,176],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":180,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":30,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[195,135,135,210,195,165],"ycors":[90,90,135,135,105,90],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":47,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":195,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":171,"y":156,"diam":108,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"cat":{"name":"cat","editableColorIndex":0,"rotate":false,"elements":[{"x1":285,"y1":240,"x2":210,"y2":240,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":195,"y1":300,"x2":165,"y2":255,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":15,"y1":240,"x2":90,"y2":240,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":285,"y1":285,"x2":195,"y2":240,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":105,"y1":300,"x2":135,"y2":255,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":270,"x2":150,"y2":285,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":15,"y1":75,"x2":15,"y2":120,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"xcors":[300,285,255,225,195,255],"ycors":[15,30,30,75,60,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[285,210,180,180,285],"ycors":[135,135,150,45,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[120,120,180,180],"ycors":[45,210,210,45],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[180,165,240,255,285],"ycors":[195,300,285,225,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[180,195,165,150,150,165],"ycors":[225,285,300,300,255,225],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[195,195,225,255,285,285],"ycors":[195,165,150,135,135,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[15,90,120,120,15],"ycors":[135,135,150,45,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[120,135,60,45,15],"ycors":[195,300,285,225,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[120,105,135,150,150,135],"ycors":[225,285,300,300,255,225],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,105,75,45,15,15],"ycors":[195,165,150,135,135,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[285,270,285,300],"ycors":[120,90,15,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":15,"y1":285,"x2":105,"y2":240,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xcors":[15,30,15,0],"ycors":[120,90,15,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[0,15,45,75,105,45],"ycors":[15,30,30,75,60,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":164,"y1":262,"x2":209,"y2":262,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":223,"y1":231,"x2":208,"y2":261,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":136,"y1":262,"x2":91,"y2":262,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":77,"y1":231,"x2":92,"y2":261,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"cat sick":{"name":"cat sick","editableColorIndex":0,"rotate":false,"elements":[{"x1":285,"y1":240,"x2":210,"y2":240,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":195,"y1":300,"x2":165,"y2":255,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":15,"y1":240,"x2":90,"y2":240,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":285,"y1":285,"x2":195,"y2":240,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":105,"y1":300,"x2":135,"y2":255,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":270,"x2":150,"y2":285,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":15,"y1":75,"x2":15,"y2":120,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"xcors":[300,285,255,225,195,255],"ycors":[15,30,30,75,60,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[285,210,180,180,285],"ycors":[135,135,150,45,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[120,120,180,180],"ycors":[45,210,210,45],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[180,165,240,255,285],"ycors":[195,300,285,225,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[180,195,165,150,150,165],"ycors":[225,285,300,300,255,225],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[195,195,225,255,285,285],"ycors":[195,165,150,135,135,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[15,90,120,120,15],"ycors":[135,135,150,45,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[120,135,60,45,15],"ycors":[195,300,285,225,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[120,105,135,150,150,135],"ycors":[225,285,300,300,255,225],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,105,75,45,15,15],"ycors":[195,165,150,135,135,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[285,270,285,300],"ycors":[120,90,15,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":15,"y1":285,"x2":105,"y2":240,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xcors":[15,30,15,0],"ycors":[120,90,15,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[0,15,45,75,105,45],"ycors":[15,30,30,75,60,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":164,"y1":262,"x2":209,"y2":262,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":223,"y1":231,"x2":208,"y2":261,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":136,"y1":262,"x2":91,"y2":262,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":77,"y1":231,"x2":92,"y2":261,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x":186,"y":186,"diam":108,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"cow skull":{"name":"cow skull","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,75,60,75,105,195,225,240,225],"ycors":[90,105,150,210,285,285,210,150,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,90,90],"ycors":[150,195,150],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,210,210],"ycors":[150,195,150],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[105,135,150,165,195],"ycors":[285,270,285,270,285],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[240,263,278,287,287,280,273,261,246,227,241,253,258,257,246,229],"ycors":[150,143,126,102,79,53,38,25,15,8,26,46,68,96,116,126],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[60,37,22,13,13,20,27,39,54,73,59,47,42,43,54,71],"ycors":[150,143,126,102,79,53,38,25,15,8,26,46,68,96,116,126],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"cow skull sick":{"name":"cow skull sick","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,75,60,75,105,195,225,240,225],"ycors":[90,105,150,210,285,285,210,150,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,90,90],"ycors":[150,195,150],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,210,210],"ycors":[150,195,150],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[105,135,150,165,195],"ycors":[285,270,285,270,285],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[240,263,278,287,287,280,273,261,246,227,241,253,258,257,246,229],"ycors":[150,143,126,102,79,53,38,25,15,8,26,46,68,96,116,126],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[60,37,22,13,13,20,27,39,54,73,59,47,42,43,54,71],"ycors":[150,143,126,102,79,53,38,25,15,8,26,46,68,96,116,126],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":156,"y":186,"diam":108,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"dog":{"name":"dog","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[300,300,270,183,180,165,165,120,0,45,75,75,105,135,165,180,225,255,225,210,225,225],"ycors":[165,195,210,204,240,270,300,300,240,165,90,45,15,45,45,15,15,30,30,60,90,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[0,120,165,165,120,10],"ycors":[240,300,300,285,285,221],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":210,"y1":60,"x2":180,"y2":45,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":90,"y1":45,"x2":90,"y2":90,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":90,"y1":90,"x2":105,"y2":105,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":105,"y1":105,"x2":135,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":90,"y1":45,"x2":135,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":135,"y1":60,"x2":135,"y2":45,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":181,"y1":203,"x2":151,"y2":203,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":201,"x2":105,"y2":171,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x":171,"y":88,"diam":34,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":261,"y":162,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"dog sick":{"name":"dog sick","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[300,300,270,183,180,165,165,120,0,45,75,75,105,135,165,180,225,255,225,210,225,225],"ycors":[165,195,210,204,240,270,300,300,240,165,90,45,15,45,45,15,15,30,30,60,90,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[0,120,165,165,120,10],"ycors":[240,300,300,285,285,221],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":210,"y1":60,"x2":180,"y2":45,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":90,"y1":45,"x2":90,"y2":90,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":90,"y1":90,"x2":105,"y2":105,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":105,"y1":105,"x2":135,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":90,"y1":45,"x2":135,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":135,"y1":60,"x2":135,"y2":45,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":181,"y1":203,"x2":151,"y2":203,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":201,"x2":105,"y2":171,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x":171,"y":88,"diam":34,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":261,"y":162,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x":126,"y":186,"diam":108,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"ghost":{"name":"ghost","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[30,13,-2,0,-2,0,15,30,58,43,43,58,73,88,73,78,103,193,223,208,208,238,253,240,238,240,255,270,283,300,298,298,300,285,285,268,238,208,208,238,253,268,268,238,178,148,103,58,43,58,103,148,193,163,118,88,73,58],"ycors":[165,164,149,135,119,105,75,75,104,119,134,134,134,104,44,14,-1,-1,29,89,119,134,119,105,89,75,60,60,74,90,104,119,135,135,150,164,179,164,194,209,224,239,269,299,299,284,269,284,299,269,254,254,254,239,209,179,179,164],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":189,"y1":253,"x2":215,"y2":253,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x":102,"y":30,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[165,135,120,105,135,165,195,180],"ycors":[105,105,120,105,75,75,105,120],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":160,"y":30,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"ghost sick":{"name":"ghost sick","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[30,13,-2,0,-2,0,15,30,58,43,43,58,73,88,73,78,103,193,223,208,208,238,253,240,238,240,255,270,283,300,298,298,300,285,285,268,238,208,208,238,253,268,268,238,178,148,103,58,43,58,103,148,193,163,118,88,73,58],"ycors":[165,164,149,135,119,105,75,75,104,119,134,134,134,104,44,14,-1,-1,29,89,119,134,119,105,89,75,60,60,74,90,104,119,135,135,150,164,179,164,194,209,224,239,269,299,299,284,269,284,299,269,254,254,254,239,209,179,179,164],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":189,"y1":253,"x2":215,"y2":253,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x":102,"y":30,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[165,135,120,105,135,165,195,180],"ycors":[105,105,120,105,75,75,105,120],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":160,"y":30,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":156,"y":171,"diam":108,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"heart":{"name":"heart","editableColorIndex":0,"rotate":false,"elements":[{"x":152,"y":19,"diam":134,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,240,270,150],"ycors":[105,105,135,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,60,30,150],"ycors":[105,105,135,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":270,"x2":150,"y2":135,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xmin":135,"ymin":90,"xmax":180,"ymax":135,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":14,"y":19,"diam":134,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"heart sick":{"name":"heart sick","editableColorIndex":0,"rotate":false,"elements":[{"x":152,"y":19,"diam":134,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,240,270,150],"ycors":[105,105,135,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,60,30,150],"ycors":[105,105,135,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":270,"x2":150,"y2":135,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xmin":135,"ymin":90,"xmax":180,"ymax":135,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":14,"y":19,"diam":134,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":171,"y":156,"diam":108,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"key":{"name":"key","editableColorIndex":0,"rotate":false,"elements":[{"xmin":90,"ymin":120,"xmax":300,"ymax":150,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":270,"ymin":135,"xmax":300,"ymax":195,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":195,"ymin":135,"xmax":225,"ymax":195,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":0,"y":60,"diam":150,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":90,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"key sick":{"name":"key sick","editableColorIndex":0,"rotate":false,"elements":[{"xmin":90,"ymin":120,"xmax":300,"ymax":150,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":270,"ymin":135,"xmax":300,"ymax":195,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":195,"ymin":135,"xmax":225,"ymax":195,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":0,"y":60,"diam":150,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":90,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":156,"y":171,"diam":108,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"leaf":{"name":"leaf","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,135,120,60,30,60,60,15,30,15,40,45,60,90,105,120,105,120,135,150,165,180,195,180,195,210,240,255,263,285,270,285,240,240,270,240,180,165],"ycors":[210,195,210,210,195,180,165,135,120,105,104,90,90,105,120,120,60,60,30,15,30,60,60,120,120,105,90,90,104,105,120,135,165,180,195,210,210,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,135,120,105,105,135,165,165],"ycors":[195,240,255,255,285,285,240,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"leaf sick":{"name":"leaf sick","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,135,120,60,30,60,60,15,30,15,40,45,60,90,105,120,105,120,135,150,165,180,195,180,195,210,240,255,263,285,270,285,240,240,270,240,180,165],"ycors":[210,195,210,210,195,180,165,135,120,105,104,90,90,105,120,120,60,60,30,15,30,60,60,120,120,105,90,90,104,105,120,135,165,180,195,210,210,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,135,120,105,105,135,165,165],"ycors":[195,240,255,255,285,285,240,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":141,"y":171,"diam":108,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"monster":{"name":"monster","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[75,90,210,225,255,255,180,120,45,45],"ycors":[150,195,195,150,120,45,0,0,45,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":165,"y":60,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":75,"y":60,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[225,285,285,255,255,180],"ycors":[150,195,285,300,210,165],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[75,15,15,45,45,120],"ycors":[150,195,285,300,210,165],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[210,225,195,165],"ycors":[210,285,285,165],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[90,75,105,135],"ycors":[210,285,285,165],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":135,"ymin":165,"xmax":165,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"monster sick":{"name":"monster sick","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[75,90,210,225,255,255,180,120,45,45],"ycors":[150,195,195,150,120,45,0,0,45,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":165,"y":60,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":75,"y":60,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[225,285,285,255,255,180],"ycors":[150,195,285,300,210,165],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[75,15,15,45,45,120],"ycors":[150,195,285,300,210,165],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[210,225,195,165],"ycors":[210,285,285,165],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[90,75,105,135],"ycors":[210,285,285,165],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":135,"ymin":165,"xmax":165,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":141,"y":141,"diam":108,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"moon":{"name":"moon","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[175,83,25,27,79,134,205,281,207,152,113,104,110,132],"ycors":[7,36,108,186,250,271,274,239,233,216,185,132,77,51],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"moon sick":{"name":"moon sick","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[160,68,10,12,64,119,190,266,192,137,98,89,95,117],"ycors":[7,36,108,186,250,271,274,239,233,216,185,132,77,51],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":171,"y":171,"diam":108,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"star":{"name":"star","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[151,185,298,207,242,151,59,94,3,116],"ycors":[1,108,108,175,282,216,282,175,108,108],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"star sick":{"name":"star sick","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[151,185,298,207,242,151,59,94,3,116],"ycors":[1,108,108,175,282,216,282,175,108,108],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":156,"y":171,"diam":108,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"target":{"name":"target","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":60,"y":60,"diam":180,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"target sick":{"name":"target sick","editableColorIndex":0,"rotate":true,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":60,"y":60,"diam":180,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":163,"y":163,"diam":95,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"wheel":{"name":"wheel","editableColorIndex":0,"rotate":false,"elements":[{"x":3,"y":3,"diam":294,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":285,"x2":150,"y2":15,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":15,"y1":150,"x2":285,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":216,"y1":40,"x2":79,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":84,"x2":269,"y2":221,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":216,"x2":269,"y2":79,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":84,"y1":40,"x2":221,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"wheel sick":{"name":"wheel sick","editableColorIndex":0,"rotate":false,"elements":[{"x":3,"y":3,"diam":294,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":285,"x2":150,"y2":15,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":15,"y1":150,"x2":285,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":216,"y1":40,"x2":79,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":84,"x2":269,"y2":221,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":216,"x2":269,"y2":79,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":84,"y1":40,"x2":221,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":156,"y":156,"diam":108,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]}};\nvar modelConfig =\n  (\n    (typeof global !== "undefined" && global !== null) ? global :\n    (typeof window !== "undefined" && window !== null) ? window :\n    {}\n  ).modelConfig || {};\nvar modelPlotOps = (typeof modelConfig.plotOps !== "undefined" && modelConfig.plotOps !== null) ? modelConfig.plotOps : {};\nmodelConfig.plots = [(function() {\n  var name    = 'Number Sick';\n  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });\n  var pens    = [new PenBundle.Pen('not-used', plotOps.makePenOps, false, new PenBundle.State(0, 1, PenBundle.DisplayMode.Line), function() {}, function() {})];\n  var setup   = function() {\n    return ProcedurePrims.runInPlotContext('Number Sick', undefined, function() {\n      plotManager.createTemporaryPen((workspace.dump('') + workspace.dump("run ") + workspace.dump(world.observer.getGlobal("run-number"))));\n      plotManager.setPenColor(PrimChecks.list.item(PrimChecks.math.mod(PrimChecks.validator.checkArg('MOD', 1, world.observer.getGlobal("run-number")), 5), [105, 15, 55, 25, 115]));\n      world.observer.setGlobal("num-infected-last-plotted", 0);;\n    });\n  };\n  var update  = function() {\n    return ProcedurePrims.runInPlotContext('Number Sick', undefined, function() {\n      let n = PrimChecks.agentset.countWith(world.turtles(), function() { return PrimChecks.turtle.getVariable("infected?"); }); ProcedurePrims.stack().currentContext().registerStringRunVar("N", n);\n      if (Prims.gt(n, world.observer.getGlobal("num-infected-last-plotted"))) {\n        plotManager.plotPoint(PrimChecks.math.minus(world.ticker.tickCount(), 1), n);\n        world.observer.setGlobal("num-infected-last-plotted", n);\n      };\n    });\n  };\n  return new Plot(name, pens, plotOps, "time", "sick", false, true, 0, 25, 0, 6, setup, update);\n})()];\nvar workspace = tortoise_require('engine/workspace')(modelConfig)([{ name: "androids", singular: "android", varNames: [] }, { name: "students", singular: "student", varNames: ["description", "located-at"] }, { name: "supervisors", singular: "supervisor", varNames: [] }])(["infected?", "base-shape", "step-size"], [])(';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;; Variable and Breed declarations ;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n\\nglobals [\\n  run-number\\n\\n  ;; variables used to assign unique color and shape to clients\\n  shape-names        ;; list that holds the names of the non-sick shapes a student\\'s turtle can have\\n  colors             ;; list that holds the colors used for students\\' turtles\\n  color-names        ;; list that holds the names of the colors used for students\\' turtles\\n  used-shape-colors  ;; list that holds the shape-color pairs that are already being used\\n  max-possible-codes ;; total number of possible unique shape/color combinations\\n\\n  ;; quick start instructions variables\\n  quick-start  ;; current quickstart instruction displayed in the quickstart monitor\\n  qs-item      ;; index of the current quickstart instruction\\n  qs-items     ;; list of quickstart instructions\\n\\n  num-infected-last-plotted ;; used in plotting only\\n                            ;; number of turtles that had infected? = true the last time we plotted.\\n\\n  __hnw_supervisor_android-delay\\n  __hnw_supervisor_infection-chance\\n  __hnw_supervisor_initial-number-sick\\n  __hnw_supervisor_number\\n\\n  __hnw_supervisor_show-sick?\\n  __hnw_supervisor_show-sick-on-clients?\\n  __hnw_supervisor_wander?\\n\\n]\\n\\nturtles-own [\\n  infected?    ;; if a turtle is sick, infected? is true, otherwise, it is false\\n  base-shape   ;; original shape of a turtle\\n  step-size    ;; the amount that a turtle will go forward in the current direction\\n]\\n\\nbreed [ androids android ]  ;; created by the CREATE ANDROIDS button; not controlled by anyone, but can become sick and spread sickness\\nbreed [ students student ]  ;; created and controlled by the clients\\nbreed [ supervisors supervisor ]  ;; the overlord of this activity\\n\\nstudents-own [\\n  description\\n  located-at\\n]\\n\\n\\n;;;;;;;;;;;;;;;;;;;;;;\\n;; Setup Procedures ;;\\n;;;;;;;;;;;;;;;;;;;;;;\\n\\nto startup\\n  setup-vars\\n  setup-quick-start\\n  reset-ticks\\nend\\n\\nto setup\\n  ask androids [ die ]\\n  set __hnw_supervisor_number 10\\n  make-androids\\n\\n  cure-all\\n  reset-ticks\\nend\\n\\n;; heals all sick turtles,  clears and sets up the plot,\\n;; and clears the lists sent to the calculators\\nto cure-all\\n  ask turtles\\n  [\\n    set infected? false\\n    set shape base-shape\\n  ]\\n  set run-number run-number + 1\\n  reset-ticks\\nend\\n\\n;; initialize global variables\\nto setup-vars\\n  set shape-names [\\"box\\" \\"star\\" \\"wheel\\" \\"target\\" \\"cat\\" \\"dog\\"\\n                   \\"butterfly\\" \\"leaf\\" \\"car\\" \\"airplane\\"\\n                   \\"monster\\" \\"key\\" \\"cow skull\\" \\"ghost\\"\\n                   \\"cactus\\" \\"moon\\" \\"heart\\"]\\n  ;; these colors were chosen with the goal of having colors\\n  ;; that are readily distinguishable from each other, and that\\n  ;; have names that everyone knows (e.g. no \\"cyan\\"!), and that\\n  ;; contrast sufficiently with the red infection dots and the\\n  ;; gray androids\\n  set colors      (list white brown green yellow\\n                        (violet + 1) (sky + 1))\\n  set color-names [\\"white\\" \\"brown\\" \\"green\\" \\"yellow\\"\\n                   \\"purple\\" \\"blue\\"]\\n  set max-possible-codes (length colors * length shape-names)\\n  set used-shape-colors []\\n  set run-number 1\\nend\\n\\n;; creates turtles that wander at random\\nto make-androids\\n  create-androids __hnw_supervisor_number\\n  [\\n    move-to one-of patches\\n    face one-of neighbors4\\n    set color gray\\n    set infected? false\\n    set base-shape \\"android\\"\\n    set shape base-shape\\n    set step-size 1\\n  ]\\nend\\n\\n;;;;;;;;;;;;;;;;;;;;;;;;\\n;; Runtime Procedures ;;\\n;;;;;;;;;;;;;;;;;;;;;;;;\\n\\nto go\\n\\n  every 0.1\\n  [\\n    ;;allow the androids to wander around the view\\n    if __hnw_supervisor_wander? [ androids-wander ]\\n\\n    ask turtles with [ infected? ]\\n    [ spread-disease ]\\n\\n    ;; keeps track of the number of times through the go procedure (if there is at least one turtle infected)\\n    ;; use an ifelse here to avoid redundant displays because tick forces a display.\\n    ;; we only want to keep track of time once the first turtle has been infected.\\n    ifelse count turtles with [infected?] > 0\\n    [ tick ]\\n    [ display ]\\n  ]\\nend\\n\\n;; controls the motion of the androids\\nto androids-wander\\n  every __hnw_supervisor_android-delay\\n  [\\n    ask androids\\n    [\\n      face one-of neighbors4\\n      fd 1\\n    ]\\n  ]\\nend\\n\\n;; additional check infect called when student moves to new patch\\n;; added to avoid rewarding movement\\nto student-move-check-infect\\n  if infected?\\n  [ spread-disease ]\\n\\n  ask other turtles-here with [ infected? ]\\n  [ ask myself [ maybe-get-sick ] ]\\nend\\n\\n;; spread disease to other turtles here\\nto spread-disease\\n  ask other turtles-here [ maybe-get-sick ]\\nend\\n\\n\\n;; turtle procedure -- roll the dice and maybe get sick\\nto maybe-get-sick\\n  if not infected? [\\n    if ((random 100) + 1) <= __hnw_supervisor_infection-chance\\n    [ get-sick ] ]\\nend\\n\\n;; turtle procedure -- set the appropriate variables to make this turtle sick\\nto get-sick\\n  set infected? true\\n  set-sick-shape\\nend\\n\\n;; turtle procedure -- change the shape of turtles to its sick shape\\n;; if show-sick? is true and change the shape to the base-shape if\\n;; show-sick? is false\\nto set-sick-shape\\n  ifelse __hnw_supervisor_show-sick?\\n  [\\n    ;; we want to check if the turtles shape is already a sick shape\\n    ;; to prevent flickering in the turtles\\n    if shape != word base-shape \\" sick\\"\\n    [ set shape word base-shape \\" sick\\" ]\\n  ]\\n  [\\n    ;; we want to check if the turtles shape is already a base-shape\\n    ;; to prevent flickering in the turtles\\n    if shape != base-shape\\n    [ set shape base-shape ]\\n  ]\\nend\\n\\n;; causes the initial infection in the turtle population --\\n;; infects a random healthy turtle until the desired number of\\n;; turtles are infected\\nto infect-turtles\\n  let healthy-turtles turtles with [ not infected? ]\\n\\n  ifelse count healthy-turtles < __hnw_supervisor_initial-number-sick\\n  [\\n    ask healthy-turtles\\n    [\\n      get-sick\\n      set-sick-shape\\n    ]\\n    user-message \\"There are no more healthy turtles to infect.  Infection stopped.\\"\\n    stop\\n  ]\\n  [\\n    ask n-of __hnw_supervisor_initial-number-sick healthy-turtles\\n    [\\n      get-sick\\n      set-sick-shape\\n    ]\\n  ]\\nend\\n\\n;;;;;;;;;;;;;;;;;;;;;;;\\n;; HubNet Procedures ;;\\n;;;;;;;;;;;;;;;;;;;;;;;\\n\\n;; Create a turtle, set its shape, color, and position\\n;; and tell the node what its turtle looks like and where it is\\nto-report create-new-student\\n  let out -1\\n  create-students 1\\n  [\\n    setup-student-vars\\n    send-info-to-clients\\n    ;; we want to make sure that the clients all have the same plot ranges,\\n    ;; so when somebody logs in, set the plot ranges to themselves so that\\n    ;; everybody will have the same size plots.\\n    set-plot-y-range plot-y-min plot-y-max\\n    set-plot-x-range plot-x-min plot-x-max\\n    set out who\\n  ]\\n  report out\\nend\\n\\n;; sets the turtle variables to appropriate initial values\\nto setup-student-vars\\n  set-unique-shape-and-color\\n  move-to one-of patches\\n  face one-of neighbors4\\n  set infected? false\\n  set step-size 1\\nend\\n\\n;; pick a base-shape and color for the turtle\\nto set-unique-shape-and-color\\n  let code random max-possible-codes\\n  while [member? code used-shape-colors and count students < max-possible-codes]\\n  [\\n    set code random max-possible-codes\\n  ]\\n  set used-shape-colors (lput code used-shape-colors)\\n  set base-shape item (code mod length shape-names) shape-names\\n  set shape base-shape\\n  set color item (code / length shape-names) colors\\nend\\n\\n;; report the string version of the turtle\\'s color\\nto-report color-string [color-value]\\n  report item (position color-value colors) color-names\\nend\\n\\n;; sends the appropriate monitor information back to the client\\nto send-info-to-clients\\n  set description (word (color-string color) \\" \\" base-shape)\\n  set located-at (word \\"(\\" pxcor \\",\\" pycor \\")\\")\\nend\\n\\n;; Kill the turtle, set its shape, color, and position\\n;; and tell the node what its turtle looks like and where it is\\nto remove-student\\n  set used-shape-colors remove my-code used-shape-colors\\nend\\n\\n;; translates a student turtle\\'s shape and color into a code\\nto-report my-code\\n  report (position base-shape shape-names) + (length shape-names) * (position color colors)\\nend\\n\\n;; Cause the students to move forward step-size in new-heading\\'s heading\\nto execute-move [new-heading]\\n  set heading new-heading\\n  fd step-size\\n  set located-at (word \\"(\\" pxcor \\",\\" pycor \\")\\")\\n\\n  ;; maybe infect or get infected by turtles on the patch student moved to\\n  student-move-check-infect\\nend\\n\\n;;; this procedure is handy for testing out additional shapes and colors;\\n;;; you can call it from the Command Center\\nto show-gamut\\n  clear-all\\n  setup-vars\\n  create-ordered-turtles max-possible-codes [\\n    fd max-pxcor * 0.7\\n    if who mod 3 = 0\\n      [ fd max-pxcor * 0.3 ]\\n    if who mod 3 = 1\\n      [ fd max-pxcor * 0.15 ]\\n    set heading 0\\n    set-unique-shape-and-color\\n  ]\\n  ask patch 0 0 [\\n    ask patches in-radius 2 [\\n      sprout-androids 1 [\\n        set shape \\"android\\"\\n        set color gray\\n      ]\\n    ]\\n  ]\\n  user-message (word length shape-names\\n              \\" shapes * \\"\\n              length colors\\n              \\" colors = \\"\\n              max-possible-codes\\n              \\" combinations\\")\\nend\\n\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;; Quick Start Procedures ;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n\\n;; instructions to quickly setup the model, and clients to run this activity\\nto setup-quick-start\\n  set qs-item 0\\n  set qs-items\\n  [\\n    \\"Teacher: Follow these directions to run the HubNet activity.\\"\\n    \\"Optional: Zoom In (see Tools in the Menu Bar)\\"\\n    \\"Optional: Change any of the settings.\\"\\n    \\"If you want to add androids press the CREATE ANDROIDS button\\"\\n    \\"Press the GO button.\\"\\n    \\"Everyone: Open up a HubNet Client on your machine and...\\"\\n      \\"type your user name, select this activity and press ENTER.\\"\\n    \\"Teacher: Have the students move their turtles around to...\\"\\n      \\"acquaint themselves with the interface.\\"\\n    \\"Press the INFECT button to start the simulation.\\"\\n    \\"Everyone: Watch the plot of the number infected.\\"\\n\\n    \\"Teacher: To run the activity again with the same group,...\\"\\n      \\"stop the model by pressing the GO button, if it is on.\\"\\n        \\"Change any of the settings that you would like.\\"\\n   \\"Press the CURE-ALL button to keep the androids, or SETUP to clear them\\"\\n    \\"Teacher: Restart the simulation by pressing the GO button again.\\"\\n      \\"Infect some turtles and continue.\\"\\n\\n    \\"Teacher: To start the simulation over with a new group,...\\"\\n      \\"stop the model by pressing the GO button, if it is on...\\"\\n        \\"have all the students log out...\\"\\n    \\"or press the RESET button in the Control Center\\"\\n        \\"start these instructions from the beginning\\"\\n  ]\\n  set quick-start (item qs-item qs-items)\\nend\\n\\n;; view the next item in the quickstart monitor\\nto view-next\\n  set qs-item qs-item + 1\\n  if qs-item >= length qs-items\\n  [ set qs-item length qs-items - 1 ]\\n  set quick-start (item qs-item qs-items)\\nend\\n\\n;; view the previous item in the quickstart monitor\\nto view-prev\\n  set qs-item qs-item - 1\\n  if qs-item < 0\\n  [ set qs-item 0 ]\\n  set quick-start (item qs-item qs-items)\\nend\\n\\n\\n\\n;; Begin new additions\\n\\n;; Student role\\n\\nto move-up\\n  execute-move 0\\nend\\n\\nto move-down\\n  execute-move 180\\nend\\n\\nto move-left\\n  execute-move 270\\nend\\n\\nto move-right\\n  execute-move 90\\nend\\n\\nto change-appearance\\n  set used-shape-colors remove my-code used-shape-colors\\n  show-turtle\\n  set-unique-shape-and-color\\n  set description (word (color-string color) \\" \\" base-shape)\\n  if infected? [ set-sick-shape ]\\nend\\n\\nto-report sick?-str\\n  report (ifelse-value __hnw_supervisor_show-sick-on-clients? [ infected? ] [ \\"N/A\\" ])\\nend\\n\\nto-report num-players\\n  report count students\\nend\\n\\nto-report num-androids\\n  report count androids\\nend\\n\\n;; Supervisor role\\n\\nto clear-the-plot\\n  clear-all-plots\\n  set run-number 0\\nend\\n\\nto-report num-turtles\\n  report count turtles\\nend\\n\\nto-report num-infected\\n  report count turtles with [infected?]\\nend\\n\\n; Copyright 1999 Uri Wilensky and Walter Stroup.\\n; See Info tab for full copyright and license.')([{"left":273,"top":94,"right":693,"bottom":514,"dimensions":{"minPxcor":-10,"maxPxcor":10,"minPycor":-10,"maxPycor":10,"patchSize":20,"wrappingAllowedInX":false,"wrappingAllowedInY":false},"fontSize":10,"updateMode":"TickBased","showTickCounter":true,"tickCounterLabel":"ticks","frameRate":30,"type":"view","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\\"go\\"); if (R === StopInterrupt) { return R; }","source":"go","left":131,"top":10,"right":209,"bottom":43,"forever":true,"buttonKind":"Observer","disableUntilTicksStart":false,"type":"button","compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {\\n  return ProcedurePrims.runInPlotContext('Number Sick', undefined, function() {\\n    plotManager.createTemporaryPen((workspace.dump('') + workspace.dump(\\"run \\") + workspace.dump(world.observer.getGlobal(\\"run-number\\"))));\\n    plotManager.setPenColor(PrimChecks.list.item(PrimChecks.math.mod(PrimChecks.validator.checkArg('MOD', 1, world.observer.getGlobal(\\"run-number\\")), 5), [105, 15, 55, 25, 115]));\\n    world.observer.setGlobal(\\"num-infected-last-plotted\\", 0);;\\n  });\\n}","compiledUpdateCode":"function() {\\n  return ProcedurePrims.runInPlotContext('Number Sick', undefined, function() {\\n    let n = PrimChecks.agentset.countWith(world.turtles(), function() { return PrimChecks.turtle.getVariable(\\"infected?\\"); }); ProcedurePrims.stack().currentContext().registerStringRunVar(\\"N\\", n);\\n    if (Prims.gt(n, world.observer.getGlobal(\\"num-infected-last-plotted\\"))) {\\n      plotManager.plotPoint(PrimChecks.math.minus(world.ticker.tickCount(), 1), n);\\n      world.observer.setGlobal(\\"num-infected-last-plotted\\", n);\\n    };\\n  });\\n}","compiledPens":[{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","display":"not-used","interval":1,"mode":0,"color":-16777216,"inLegend":false,"setupCode":"","updateCode":"","type":"pen","compilation":{"success":true,"messages":[]}}],"display":"Number Sick","left":14,"top":367,"right":258,"bottom":564,"xAxis":"time","yAxis":"sick","xmin":0,"xmax":25,"ymin":0,"ymax":6,"autoPlotOn":true,"legendOn":false,"setupCode":";; create a temporary plot pen for the current run\\ncreate-temporary-plot-pen word \\"run \\" run-number\\n;; cycle through a few colors so it is easy to\\n;; differentiate the runs.\\nset-plot-pen-color item (run-number mod 5) [blue red green orange violet]\\n;; each run starts with zero infected.\\nset num-infected-last-plotted 0","updateCode":"let n count turtles with [infected?] \\n;; only plot if someone has been infected since the last time we plotted. \\n;; this smoothes out the plot a bit.\\nif n > num-infected-last-plotted [\\n  plotxy ticks - 1 n\\n  set num-infected-last-plotted n \\n]","pens":[{"display":"not-used","interval":1,"mode":0,"color":-16777216,"inLegend":false,"setupCode":"","updateCode":"","type":"pen"}],"type":"plot","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\\"setup\\"); if (R === StopInterrupt) { return R; }","source":"setup","left":53,"top":10,"right":130,"bottom":43,"forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"type":"button","compilation":{"success":true,"messages":[]}}])(tortoise_require("extensions/all").porters())(["run-number", "shape-names", "colors", "color-names", "used-shape-colors", "max-possible-codes", "quick-start", "qs-item", "qs-items", "num-infected-last-plotted", "__hnw_supervisor_android-delay", "__hnw_supervisor_infection-chance", "__hnw_supervisor_initial-number-sick", "__hnw_supervisor_number", "__hnw_supervisor_show-sick?", "__hnw_supervisor_show-sick-on-clients?", "__hnw_supervisor_wander?"], [], [], -10, 10, -10, 10, 20, false, false, turtleShapes, linkShapes, function(){});\nvar Extensions = tortoise_require('extensions/all').initialize(workspace);\nvar BreedManager = workspace.breedManager;\nvar ImportExportPrims = workspace.importExportPrims;\nvar InspectionPrims = workspace.inspectionPrims;\nvar LayoutManager = workspace.layoutManager;\nvar LinkPrims = workspace.linkPrims;\nvar ListPrims = workspace.listPrims;\nvar MousePrims = workspace.mousePrims;\nvar OutputPrims = workspace.outputPrims;\nvar PrimChecks = workspace.primChecks;\nvar Prims = workspace.prims;\nvar PrintPrims = workspace.printPrims;\nvar ProcedurePrims = workspace.procedurePrims;\nvar RandomPrims = workspace.randomPrims;\nvar SelfManager = workspace.selfManager;\nvar SelfPrims = workspace.selfPrims;\nvar Updater = workspace.updater;\nvar UserDialogPrims = workspace.userDialogPrims;\nvar plotManager = workspace.plotManager;\nvar world = workspace.world;\nProcedurePrims.defineCommand("startup", 1894, 1949, (function() {\n  var R = ProcedurePrims.callCommand("setup-vars"); if (R === DeathInterrupt) { return R; }\n  var R = ProcedurePrims.callCommand("setup-quick-start"); if (R === DeathInterrupt) { return R; }\n  world.ticker.reset();\n}))\nProcedurePrims.defineCommand("setup", 1957, 2061, (function() {\n  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("ANDROIDS"), function() { return SelfManager.self().die(); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(R); return R; }\n  world.observer.setGlobal("__hnw_supervisor_number", 10);\n  var R = ProcedurePrims.callCommand("make-androids"); if (R === DeathInterrupt) { return R; }\n  var R = ProcedurePrims.callCommand("cure-all"); if (R === DeathInterrupt) { return R; }\n  world.ticker.reset();\n}))\nProcedurePrims.defineCommand("cure-all", 2174, 2300, (function() {\n  var R = ProcedurePrims.ask(world.turtles(), function() {\n    PrimChecks.turtle.setVariable("infected?", false);\n    SelfManager.self().setVariable("shape", PrimChecks.turtle.getVariable("base-shape"));\n  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(R); return R; }\n  world.observer.setGlobal("run-number", PrimChecks.math.plus(PrimChecks.validator.checkArg('+', 1, world.observer.getGlobal("run-number")), 1));\n  world.ticker.reset();\n}))\nProcedurePrims.defineCommand("setup-vars", 2339, 3129, (function() {\n  world.observer.setGlobal("shape-names", ["box", "star", "wheel", "target", "cat", "dog", "butterfly", "leaf", "car", "airplane", "monster", "key", "cow skull", "ghost", "cactus", "moon", "heart"]);\n  world.observer.setGlobal("colors", ListPrims.list(9.9, 35, 55, 45, PrimChecks.math.plus(115, 1), PrimChecks.math.plus(95, 1)));\n  world.observer.setGlobal("color-names", ["white", "brown", "green", "yellow", "purple", "blue"]);\n  world.observer.setGlobal("max-possible-codes", PrimChecks.math.mult(PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 12, world.observer.getGlobal("colors"))), PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 12, world.observer.getGlobal("shape-names")))));\n  world.observer.setGlobal("used-shape-colors", []);\n  world.observer.setGlobal("run-number", 1);\n}))\nProcedurePrims.defineCommand("make-androids", 3178, 3413, (function() {\n  var R = ProcedurePrims.ask(world.turtleManager.createTurtles(world.observer.getGlobal("__hnw_supervisor_number"), "ANDROIDS"), function() {\n    SelfManager.self().moveTo(PrimChecks.list.oneOf(world.patches()));\n    SelfManager.self().face(PrimChecks.validator.checkArg('FACE', 768, PrimChecks.list.oneOf(SelfManager.self().getNeighbors4())));\n    SelfManager.self().setVariable("color", 5);\n    PrimChecks.turtle.setVariable("infected?", false);\n    PrimChecks.turtle.setVariable("base-shape", "android");\n    SelfManager.self().setVariable("shape", PrimChecks.turtle.getVariable("base-shape"));\n    PrimChecks.turtle.setVariable("step-size", 1);\n  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(R); return R; }\n}))\nProcedurePrims.defineCommand("go", 3497, 4037, (function() {\n  if (Prims.isThrottleTimeElapsed("go_0", workspace.selfManager.self(), 0.1)) {\n    Prims.resetThrottleTimerFor("go_0", workspace.selfManager.self());\n    if (world.observer.getGlobal("__hnw_supervisor_wander?")) {\n      var R = ProcedurePrims.callCommand("androids-wander"); if (R === DeathInterrupt) { return R; }\n    }\n    var R = ProcedurePrims.ask(PrimChecks.agentset.with(world.turtles(), function() { return PrimChecks.turtle.getVariable("infected?"); }), function() { var R = ProcedurePrims.callCommand("spread-disease"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(R); return R; }\n    if (Prims.gt(PrimChecks.agentset.countWith(world.turtles(), function() { return PrimChecks.turtle.getVariable("infected?"); }), 0)) {\n      world.ticker.tick();\n    }\n    else {\n      notImplemented('display', undefined)();\n    }\n  }\n}))\nProcedurePrims.defineCommand("androids-wander", 4084, 4216, (function() {\n  if (Prims.isThrottleTimeElapsed("androidsHwander_0", workspace.selfManager.self(), world.observer.getGlobal("__hnw_supervisor_android-delay"))) {\n    Prims.resetThrottleTimerFor("androidsHwander_0", workspace.selfManager.self());\n    var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("ANDROIDS"), function() {\n      SelfManager.self().face(PrimChecks.validator.checkArg('FACE', 768, PrimChecks.list.oneOf(SelfManager.self().getNeighbors4())));\n      SelfManager.self()._optimalFdOne();\n    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(R); return R; }\n  }\n}))\nProcedurePrims.defineCommand("student-move-check-infect", 4327, 4470, (function() {\n  if (PrimChecks.turtle.getVariable("infected?")) {\n    var R = ProcedurePrims.callCommand("spread-disease"); if (R === DeathInterrupt) { return R; }\n  }\n  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 1904, PrimChecks.agentset.otherWith(SelfManager.self().turtlesHere(), function() { return PrimChecks.turtle.getVariable("infected?"); })), function() {\n    var R = ProcedurePrims.ask(SelfManager.myself(), function() { var R = ProcedurePrims.callCommand("maybe-get-sick"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(R); return R; }\n  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(R); return R; }\n}))\nProcedurePrims.defineCommand("spread-disease", 4518, 4577, (function() {\n  var R = ProcedurePrims.ask(SelfPrims.other(SelfManager.self().turtlesHere()), function() { var R = ProcedurePrims.callCommand("maybe-get-sick"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(R); return R; }\n}))\nProcedurePrims.defineCommand("maybe-get-sick", 4642, 4760, (function() {\n  if (PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 2, PrimChecks.turtle.getVariable("infected?")))) {\n    if (Prims.lte(PrimChecks.math.plus(RandomPrims.randomLong(100), 1), world.observer.getGlobal("__hnw_supervisor_infection-chance"))) {\n      var R = ProcedurePrims.callCommand("get-sick"); if (R === DeathInterrupt) { return R; }\n    }\n  }\n}))\nProcedurePrims.defineCommand("get-sick", 4846, 4893, (function() {\n  PrimChecks.turtle.setVariable("infected?", true);\n  var R = ProcedurePrims.callCommand("set-sick-shape"); if (R === DeathInterrupt) { return R; }\n}))\nProcedurePrims.defineCommand("set-sick-shape", 5060, 5492, (function() {\n  if (world.observer.getGlobal("__hnw_supervisor_show-sick?")) {\n    if (!Prims.equality(SelfManager.self().getVariable("shape"), (workspace.dump('') + workspace.dump(PrimChecks.turtle.getVariable("base-shape")) + workspace.dump(" sick")))) {\n      SelfManager.self().setVariable("shape", (workspace.dump('') + workspace.dump(PrimChecks.turtle.getVariable("base-shape")) + workspace.dump(" sick")));\n    }\n  }\n  else {\n    if (!Prims.equality(SelfManager.self().getVariable("shape"), PrimChecks.turtle.getVariable("base-shape"))) {\n      SelfManager.self().setVariable("shape", PrimChecks.turtle.getVariable("base-shape"));\n    }\n  }\n}))\nProcedurePrims.defineCommand("infect-turtles", 5647, 6081, (function() {\n  let healthyHturtles = PrimChecks.agentset.with(world.turtles(), function() {\n    return PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 2, PrimChecks.turtle.getVariable("infected?")));\n  }); ProcedurePrims.stack().currentContext().registerStringRunVar("HEALTHY-TURTLES", healthyHturtles);\n  if (Prims.lt(PrimChecks.agentset.count(PrimChecks.validator.checkArg('COUNT', 112, healthyHturtles)), world.observer.getGlobal("__hnw_supervisor_initial-number-sick"))) {\n    var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 1904, healthyHturtles), function() {\n      var R = ProcedurePrims.callCommand("get-sick"); if (R === DeathInterrupt) { return R; }\n      var R = ProcedurePrims.callCommand("set-sick-shape"); if (R === DeathInterrupt) { return R; }\n    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(R); return R; }\n    UserDialogPrims.confirm("There are no more healthy turtles to infect.  Infection stopped.");\n    return PrimChecks.procedure.stop();\n  }\n  else {\n    var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 1904, PrimChecks.list.nOf(PrimChecks.validator.checkArg('N-OF', 1, world.observer.getGlobal("__hnw_supervisor_initial-number-sick")), PrimChecks.validator.checkArg('N-OF', 120, healthyHturtles))), function() {\n      var R = ProcedurePrims.callCommand("get-sick"); if (R === DeathInterrupt) { return R; }\n      var R = ProcedurePrims.callCommand("set-sick-shape"); if (R === DeathInterrupt) { return R; }\n    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(R); return R; }\n  }\n}))\nProcedurePrims.defineReporter("create-new-student", 6288, 6710, (function() {\n  let out = -1; ProcedurePrims.stack().currentContext().registerStringRunVar("OUT", out);\n  var R = ProcedurePrims.ask(world.turtleManager.createTurtles(1, "STUDENTS"), function() {\n    var R = ProcedurePrims.callCommand("setup-student-vars"); if (R === DeathInterrupt) { return R; }\n    var R = ProcedurePrims.callCommand("send-info-to-clients"); if (R === DeathInterrupt) { return R; }\n    plotManager.setYRange(plotManager.getPlotYMin(), plotManager.getPlotYMax());\n    plotManager.setXRange(plotManager.getPlotXMin(), plotManager.getPlotXMax());\n    out = PrimChecks.turtle.getVariable("who"); ProcedurePrims.stack().currentContext().updateStringRunVar("OUT", out);\n  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(R); return R; }\n  return PrimChecks.procedure.report(out);\n}))\nProcedurePrims.defineCommand("setup-student-vars", 6777, 6915, (function() {\n  var R = ProcedurePrims.callCommand("set-unique-shape-and-color"); if (R === DeathInterrupt) { return R; }\n  SelfManager.self().moveTo(PrimChecks.list.oneOf(world.patches()));\n  SelfManager.self().face(PrimChecks.validator.checkArg('FACE', 768, PrimChecks.list.oneOf(SelfManager.self().getNeighbors4())));\n  PrimChecks.turtle.setVariable("infected?", false);\n  PrimChecks.turtle.setVariable("step-size", 1);\n}))\nProcedurePrims.defineCommand("set-unique-shape-and-color", 6969, 7354, (function() {\n  let code = PrimChecks.math.random(PrimChecks.validator.checkArg('RANDOM', 1, world.observer.getGlobal("max-possible-codes"))); ProcedurePrims.stack().currentContext().registerStringRunVar("CODE", code);\n  while ((PrimChecks.list.member(code, PrimChecks.validator.checkArg('MEMBER?', 124, world.observer.getGlobal("used-shape-colors"))) && Prims.lt(PrimChecks.agentset.count(world.turtleManager.turtlesOfBreed("STUDENTS")), world.observer.getGlobal("max-possible-codes")))) {\n    code = PrimChecks.math.random(PrimChecks.validator.checkArg('RANDOM', 1, world.observer.getGlobal("max-possible-codes"))); ProcedurePrims.stack().currentContext().updateStringRunVar("CODE", code);\n  }\n  world.observer.setGlobal("used-shape-colors", PrimChecks.list.lput(code, PrimChecks.validator.checkArg('LPUT', 8, world.observer.getGlobal("used-shape-colors"))));\n  PrimChecks.turtle.setVariable("base-shape", PrimChecks.list.item(PrimChecks.math.mod(PrimChecks.validator.checkArg('MOD', 1, code), PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 12, world.observer.getGlobal("shape-names")))), PrimChecks.validator.checkArg('ITEM', 12, world.observer.getGlobal("shape-names"))));\n  SelfManager.self().setVariable("shape", PrimChecks.turtle.getVariable("base-shape"));\n  SelfManager.self().setVariable("color", PrimChecks.list.item(PrimChecks.math.div(PrimChecks.validator.checkArg('/', 1, code), PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 12, world.observer.getGlobal("shape-names")))), PrimChecks.validator.checkArg('ITEM', 12, world.observer.getGlobal("colors"))));\n}))\nProcedurePrims.defineReporter("color-string", 7420, 7503, (function(colorHvalue) {\n  return PrimChecks.procedure.report(PrimChecks.list.item(PrimChecks.validator.checkArg('ITEM', 1, PrimChecks.list.position(colorHvalue, PrimChecks.validator.checkArg('POSITION', 12, world.observer.getGlobal("colors")))), PrimChecks.validator.checkArg('ITEM', 12, world.observer.getGlobal("color-names"))));\n}))\nProcedurePrims.defineCommand("send-info-to-clients", 7575, 7705, (function() {\n  SelfManager.self().setVariable("description", (workspace.dump('') + workspace.dump(PrimChecks.procedure.callReporter("color-string", SelfManager.self().getVariable("color"))) + workspace.dump(" ") + workspace.dump(PrimChecks.turtle.getVariable("base-shape"))));\n  SelfManager.self().setVariable("located-at", (workspace.dump('') + workspace.dump("(") + workspace.dump(SelfManager.self().getPatchVariable("pxcor")) + workspace.dump(",") + workspace.dump(SelfManager.self().getPatchVariable("pycor")) + workspace.dump(")")));\n}))\nProcedurePrims.defineCommand("remove-student", 7832, 7904, (function() {\n  world.observer.setGlobal("used-shape-colors", PrimChecks.list.remove(PrimChecks.procedure.callReporter("my-code"), PrimChecks.validator.checkArg('REMOVE', 12, world.observer.getGlobal("used-shape-colors"))));\n}))\nProcedurePrims.defineReporter("my-code", 7980, 8080, (function() {\n  return PrimChecks.procedure.report(PrimChecks.math.plus(PrimChecks.validator.checkArg('+', 1, PrimChecks.list.position(PrimChecks.validator.checkArg('POSITION', 8191, PrimChecks.turtle.getVariable("base-shape")), PrimChecks.validator.checkArg('POSITION', 12, world.observer.getGlobal("shape-names")))), PrimChecks.math.mult(PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 12, world.observer.getGlobal("shape-names"))), PrimChecks.validator.checkArg('*', 1, PrimChecks.list.position(PrimChecks.validator.checkArg('POSITION', 8191, SelfManager.self().getVariable("color")), PrimChecks.validator.checkArg('POSITION', 12, world.observer.getGlobal("colors")))))));\n}))\nProcedurePrims.defineCommand("execute-move", 8161, 8381, (function(newHheading) {\n  PrimChecks.turtle.setVariable("heading", newHheading);\n  SelfManager.self().fd(PrimChecks.turtle.getVariable("step-size"));\n  SelfManager.self().setVariable("located-at", (workspace.dump('') + workspace.dump("(") + workspace.dump(SelfManager.self().getPatchVariable("pxcor")) + workspace.dump(",") + workspace.dump(SelfManager.self().getPatchVariable("pycor")) + workspace.dump(")")));\n  var R = ProcedurePrims.callCommand("student-move-check-infect"); if (R === DeathInterrupt) { return R; }\n}))\nProcedurePrims.defineCommand("show-gamut", 8507, 9095, (function() {\n  world.clearAll();\n  var R = ProcedurePrims.callCommand("setup-vars"); if (R === DeathInterrupt) { return R; }\n  var R = ProcedurePrims.ask(world.turtleManager.createOrderedTurtles(world.observer.getGlobal("max-possible-codes"), ""), function() {\n    SelfManager.self().fd(PrimChecks.math.mult(world.topology.maxPxcor, 0.7));\n    if (Prims.equality(PrimChecks.math.mod(PrimChecks.validator.checkArg('MOD', 1, PrimChecks.turtle.getVariable("who")), 3), 0)) {\n      SelfManager.self().fd(PrimChecks.math.mult(world.topology.maxPxcor, 0.3));\n    }\n    if (Prims.equality(PrimChecks.math.mod(PrimChecks.validator.checkArg('MOD', 1, PrimChecks.turtle.getVariable("who")), 3), 1)) {\n      SelfManager.self().fd(PrimChecks.math.mult(world.topology.maxPxcor, 0.15));\n    }\n    PrimChecks.turtle.setVariable("heading", 0);\n    var R = ProcedurePrims.callCommand("set-unique-shape-and-color"); if (R === DeathInterrupt) { return R; }\n  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(R); return R; }\n  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 1904, world.getPatchAt(0, 0)), function() {\n    var R = ProcedurePrims.ask(SelfManager.self().inRadius(world.patches(), 2), function() {\n      var R = ProcedurePrims.ask(SelfManager.self().sprout(1, "ANDROIDS"), function() {\n        SelfManager.self().setVariable("shape", "android");\n        SelfManager.self().setVariable("color", 5);\n      }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(R); return R; }\n    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(R); return R; }\n  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(R); return R; }\n  UserDialogPrims.confirm((workspace.dump('') + workspace.dump(PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 12, world.observer.getGlobal("shape-names")))) + workspace.dump(" shapes * ") + workspace.dump(PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 12, world.observer.getGlobal("colors")))) + workspace.dump(" colors = ") + workspace.dump(world.observer.getGlobal("max-possible-codes")) + workspace.dump(" combinations")));\n}))\nProcedurePrims.defineCommand("setup-quick-start", 9268, 10635, (function() {\n  world.observer.setGlobal("qs-item", 0);\n  world.observer.setGlobal("qs-items", ["Teacher: Follow these directions to run the HubNet activity.", "Optional: Zoom In (see Tools in the Menu Bar)", "Optional: Change any of the settings.", "If you want to add androids press the CREATE ANDROIDS button", "Press the GO button.", "Everyone: Open up a HubNet Client on your machine and...", "type your user name, select this activity and press ENTER.", "Teacher: Have the students move their turtles around to...", "acquaint themselves with the interface.", "Press the INFECT button to start the simulation.", "Everyone: Watch the plot of the number infected.", "Teacher: To run the activity again with the same group,...", "stop the model by pressing the GO button, if it is on.", "Change any of the settings that you would like.", "Press the CURE-ALL button to keep the androids, or SETUP to clear them", "Teacher: Restart the simulation by pressing the GO button again.", "Infect some turtles and continue.", "Teacher: To start the simulation over with a new group,...", "stop the model by pressing the GO button, if it is on...", "have all the students log out...", "or press the RESET button in the Control Center", "start these instructions from the beginning"]);\n  world.observer.setGlobal("quick-start", PrimChecks.list.item(PrimChecks.validator.checkArg('ITEM', 1, world.observer.getGlobal("qs-item")), PrimChecks.validator.checkArg('ITEM', 12, world.observer.getGlobal("qs-items"))));\n}))\nProcedurePrims.defineCommand("view-next", 10691, 10839, (function() {\n  world.observer.setGlobal("qs-item", PrimChecks.math.plus(PrimChecks.validator.checkArg('+', 1, world.observer.getGlobal("qs-item")), 1));\n  if (Prims.gte(world.observer.getGlobal("qs-item"), PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 12, world.observer.getGlobal("qs-items"))))) {\n    world.observer.setGlobal("qs-item", PrimChecks.math.minus(PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 12, world.observer.getGlobal("qs-items"))), 1));\n  }\n  world.observer.setGlobal("quick-start", PrimChecks.list.item(PrimChecks.validator.checkArg('ITEM', 1, world.observer.getGlobal("qs-item")), PrimChecks.validator.checkArg('ITEM', 12, world.observer.getGlobal("qs-items"))));\n}))\nProcedurePrims.defineCommand("view-prev", 10899, 11014, (function() {\n  world.observer.setGlobal("qs-item", PrimChecks.math.minus(PrimChecks.validator.checkArg('-', 1, world.observer.getGlobal("qs-item")), 1));\n  if (Prims.lt(world.observer.getGlobal("qs-item"), 0)) {\n    world.observer.setGlobal("qs-item", 0);\n  }\n  world.observer.setGlobal("quick-start", PrimChecks.list.item(PrimChecks.validator.checkArg('ITEM', 1, world.observer.getGlobal("qs-item")), PrimChecks.validator.checkArg('ITEM', 12, world.observer.getGlobal("qs-items"))));\n}))\nProcedurePrims.defineCommand("move-up", 11065, 11090, (function() { var R = ProcedurePrims.callCommand("execute-move", 0); if (R === DeathInterrupt) { return R; } }))\nProcedurePrims.defineCommand("move-down", 11098, 11127, (function() { var R = ProcedurePrims.callCommand("execute-move", 180); if (R === DeathInterrupt) { return R; } }))\nProcedurePrims.defineCommand("move-left", 11135, 11164, (function() { var R = ProcedurePrims.callCommand("execute-move", 270); if (R === DeathInterrupt) { return R; } }))\nProcedurePrims.defineCommand("move-right", 11172, 11201, (function() { var R = ProcedurePrims.callCommand("execute-move", 90); if (R === DeathInterrupt) { return R; } }))\nProcedurePrims.defineCommand("change-appearance", 11209, 11422, (function() {\n  world.observer.setGlobal("used-shape-colors", PrimChecks.list.remove(PrimChecks.procedure.callReporter("my-code"), PrimChecks.validator.checkArg('REMOVE', 12, world.observer.getGlobal("used-shape-colors"))));\n  SelfManager.self().hideTurtle(false);\n  var R = ProcedurePrims.callCommand("set-unique-shape-and-color"); if (R === DeathInterrupt) { return R; }\n  SelfManager.self().setVariable("description", (workspace.dump('') + workspace.dump(PrimChecks.procedure.callReporter("color-string", SelfManager.self().getVariable("color"))) + workspace.dump(" ") + workspace.dump(PrimChecks.turtle.getVariable("base-shape"))));\n  if (PrimChecks.turtle.getVariable("infected?")) {\n    var R = ProcedurePrims.callCommand("set-sick-shape"); if (R === DeathInterrupt) { return R; }\n  }\n}))\nProcedurePrims.defineReporter("sick?-str", 11437, 11534, (function() {\n  return PrimChecks.procedure.report((Prims.ifElseValueBooleanCheck(world.observer.getGlobal("__hnw_supervisor_show-sick-on-clients?")) ? PrimChecks.turtle.getVariable("infected?") : "N/A"));\n}))\nProcedurePrims.defineReporter("num-players", 11549, 11585, (function() {\n  return PrimChecks.procedure.report(PrimChecks.agentset.count(world.turtleManager.turtlesOfBreed("STUDENTS")));\n}))\nProcedurePrims.defineReporter("num-androids", 11600, 11637, (function() {\n  return PrimChecks.procedure.report(PrimChecks.agentset.count(world.turtleManager.turtlesOfBreed("ANDROIDS")));\n}))\nProcedurePrims.defineCommand("clear-the-plot", 11665, 11717, (function() {\n  plotManager.clearAllPlots();\n  world.observer.setGlobal("run-number", 0);\n}))\nProcedurePrims.defineReporter("num-turtles", 11732, 11767, (function() { return PrimChecks.procedure.report(PrimChecks.agentset.count(world.turtles())); }))\nProcedurePrims.defineReporter("num-infected", 11782, 11835, (function() {\n  return PrimChecks.procedure.report(PrimChecks.agentset.countWith(world.turtles(), function() { return PrimChecks.turtle.getVariable("infected?"); }));\n}))\n\n`
